@model WaffleOffer.Models.Trade
@{
    ViewBag.Title = "Trade";
}

<script type="text/javascript">
    function moveItem(id)
    {
        //have to convert the model values because mixing javascript and razor gets weird
        var submitted = "@Model.Submitted" == "True";
        var accepted = "@Model.Accepted" == "True";
        var canceled = "@Model.Canceled" == "True";
        var rejected = "@Model.Rejected" == "True";
        var isSender = "@User.Identity.Name" == "@Model.SendingTrader.UserName";
        //if not a new trade, the submitter may not make changes
        //if trade is already accepted, rejected, or canceled, nobody can make changes
        if (submitted && isSender || accepted || rejected || canceled) {
            alert("Cannot edit trade at this stage")
            return;
        }
        //find specified element
        var item = document.getElementById(id);
        //find source column id
        var srcColId = item.parentElement.getAttribute("id");
        //set destination column
        var destColId;

        switch (srcColId)
        {
            case "SenderHaves":
                destColId = "SenderOffers";
                break;
            case "SenderOffers":
                destColId = "SenderHaves";
                break;
            case "ReceiverHaves":
                destColId = "ReceiverOffers";
                break;
            case "ReceiverOffers":
                destColId = "ReceiverHaves";
                break;
        }
        //append element to destination column
        document.getElementById(destColId).appendChild(item);

        //show a message to the user if a column is empty
        //does not seem to do anything. delete if cannot get to work.
        //showNoItemsMessage(srcColId);
    }

    function submitTrade()
    {
        //check to make sure that each trader is offering something
        var col1 = document.getElementById("SenderOffers");
        var col2 = document.getElementById("ReceiverOffers");
        if (col1.childElementCount < 1 || col2.childElementCount < 1) {
            //block submission if there is not at least 1 element (not node)
            //in each column
            alert("Each trader must offer something in trade");
            return;
        }
        //get list of items in the offered column
        //get list of items in the requested column
        //add inputs to form with value of item ids
        addItems("SenderOffers");
        addItems("ReceiverOffers");
        //submit form
        document.getElementById("submitTrade").submit();
    }

    function updateTrade(status)
    {
        //add hidden input to form with status code
        //generate a hidden input element
        var n = document.createElement("INPUT");
        n.setAttribute('type', 'hidden');
        //assign name
        n.setAttribute('name', 'Status');

        n.setAttribute('value', status);
        //append to submission form
        document.getElementById('updateTrade').appendChild(n);
        //submit form
        document.getElementById("updateTrade").submit();
    }

    function addItems(column)
    {
        //get the column element
        var col = document.getElementById(column);
        //get all items in it
        var items = col.childNodes;
        //for each item:
        for (var i = 0; i < items.length; i++)
        {
            if (items[i].nodeType == 1) {
                //assign value
                var item = items[i];
                var itemId = item.getAttribute('id');


                //generate a hidden input element
                var n = document.createElement("INPUT");
                n.setAttribute('type', 'hidden');
                //assign name
                n.setAttribute('name', 'Items');

                n.setAttribute('value', itemId);
                //append to submission form
                document.getElementById('submitTrade').appendChild(n);
            }
        }
    }

    function checkColumnEmpty(column) {
        //get the column element
        var col = document.getElementById(column);
        if (col.childElementCount > 0)
            return false;
        else
            return true;
    }

    // This isn't working... (Though it is not--as far as I can see--breaking anything)
    function showNoItemsMessage(column) {
        // check to see whether or not the column is empty
        if (checkColumnEmpty(column)) {
            // find the corresponding message paragraph tag id
            var pId = "";
            var msg = "";
            switch (column) {
                case "SenderHaves":
                    pId = "msgSenderHaves";
                    msg = "Nothing left in inventory.";
                    break;
                case "SenderOffers":
                    pId = "msgSenderOffers";
                    msg = "Nothing offered.";
                    break;
                case "ReceiverHaves":
                    pId = "msgReceiverHaves";
                    msg = "Nothing left in inventory.";
                    break;
                case "ReceiverOffers":
                    pId = "msgReceiverOffers";
                    msg = "Nothing offered.";
                    break;
            }
            // Insert the appropriate message between the paragraph tags
            // that correspond to the column passed in
            document.getElementById(pId).innerHTML = msg;
        }
    }
</script>

<h4 class="dark-heading divider-new">Trade</h4>
@*Commenting this bit out until group approves new trade aesthetic - Sally*@
@*
<table class="table">
    <tr>
        <th>@Html.DisplayFor(model => model.SendingTrader.UserName)</th>
        <th>@Html.DisplayFor(model => model.SendingTrader.UserName)'s Offer</th>
        <th>@Html.DisplayFor(model => model.ReceivingTrader.UserName)'s Offer</th>
        <th>@Html.DisplayFor(model => model.ReceivingTrader.UserName)</th>
    </tr>
    <tr>
        <td>           
            <ul id="SenderHaves">
                @foreach (var item in Model.SenderHaves)
                {
                    <li id="@item.ItemID">
                        <input type="button" class="btn btn-custom-grey btn-sender" onclick="moveItem(@item.ItemID)" value="@item.Name" />
                    </li>
                }
            </ul>
        </td>

        <td>
            <ul id="SenderOffers">
                @foreach (var item in Model.SendingItems)
                {
                    <li id="@item.ItemID">
                        <input type="button" class="btn btn-custom-grey btn-sender" onclick="moveItem(@item.ItemID)" value="@item.Name" />
                    </li>
                }
            </ul>
        </td>
        <td>
            <ul id="ReceiverOffers">
                @foreach (var item in Model.ReceivingItems)
                {
                    <li id="@item.ItemID">
                        <input type="button" class="btn btn-custom-grey btn-receiver" onclick="moveItem(@item.ItemID)" value="@item.Name" />
                    </li>
                }
            </ul>
        </td>
        <td>
            <ul id="ReceiverHaves">
                @foreach (var item in Model.ReceiverHaves)
                {
                    <li id="@item.ItemID">
                        <input type="button" class="btn btn-custom-grey btn-receiver" onclick="moveItem(@item.ItemID)" value="@item.Name" />
                    </li>
                }
            </ul>
        </td>
    </tr>
</table>
*@
<div class="panel-group">
    <div class="panel panel-default custom-blue">
        <h5 class="h5-responsive text-center white-text">@Html.DisplayFor(model => model.SendingTrader.UserName) Inventory</h5>
    </div>
    <div class="panel panel-default">
        <div id="SenderHaves">
            <div class="clearfix"></div>
            @foreach (var item in Model.SenderHaves)
            {
                <div id="@item.ItemID">
                    <input type="button" class="btn btn-custom-grey btn-sender" onclick="moveItem(@item.ItemID)" value="@item.Name" />
                </div>
            }
            <p id="msgSenderHaves"></p>
        </div>
    </div>
    <div class="panel panel-default custom-blue">
        <h5 class="h5-responsive text-center white-text">@Html.DisplayFor(model => model.SendingTrader.UserName)'s Offer</h5> 
    </div>
    <div class="panel panel-default">
        <div id="SenderOffers">
            @foreach (var item in Model.SendingItems)
            {
                <div id="@item.ItemID">
                    <input type="button" class="btn btn-custom-grey btn-sender" onclick="moveItem(@item.ItemID)" value="@item.Name" />
                </div>
            }
            <p id="msgSenderOffers"></p>
        </div>
    </div>
    <div class="panel panel-default custom-green">
        <h5 class="h5-responsive text-center white-text">@Html.DisplayFor(model => model.ReceivingTrader.UserName)'s Offer</h5>
    </div>
    <div class="panel panel-default" id="ReceiverOffers">
        <div id="ReceiverOffers">
            @foreach (var item in Model.ReceivingItems)
            {
                <div id="@item.ItemID">
                    <input type="button" class="btn btn-custom-grey btn-receiver" onclick="moveItem(@item.ItemID)" value="@item.Name" />
                </div>
            }
            <p id="msgReceiverOffers"></p>
        </div>
    </div>
    <div class="panel panel-default custom-green">
        <h5 class="h5-responsive text-center white-text">@Html.DisplayFor(model => model.ReceivingTrader.UserName) Inventory</h5>
    </div>
    <div class="panel panel-default" id="ReceiverHaves">
        <div id="ReceiverHaves">
            @foreach (var item in Model.ReceiverHaves)
            {
                <div id="@item.ItemID">
                    <input type="button" class="btn btn-custom-grey btn-receiver" onclick="moveItem(@item.ItemID)" value="@item.Name" />
                </div>
            }
            <p id="msgReceiverHaves"></p>
        </div>
    </div>
</div>

@if (!Model.Submitted || (!Model.Canceled && !Model.Rejected && !Model.Accepted 
    && Model.SendingTrader.UserName != User.Identity.Name))
{
    <button class="btn btn-custom-submit" onclick="submitTrade()">Submit Trade</button>
}
@if (Model.Submitted && (!Model.Canceled && !Model.Rejected && !Model.Accepted
                && Model.SendingTrader.UserName != User.Identity.Name))
{
    <button class="btn btn-custom-submit" onclick="updateTrade('Accept')">Accept Trade</button>
    <button class="btn btn-custom-submit" onclick="updateTrade('Reject')">Reject Trade</button>
}
@if (User.Identity.Name == Model.SendingTrader.UserName && Model.Submitted && !Model.Canceled && !Model.Accepted 
    && !Model.Rejected || (Model.Accepted && !Model.SenderConfirmed && !Model.ReceiverConfirmed))
{
    <button class="btn btn-custom-submit" onclick="updateTrade('Cancel')">Cancel Trade</button>
}
@if (Model.Accepted && ((User.Identity.Name == Model.SendingTrader.UserName && !Model.SenderConfirmed)
                || (User.Identity.Name == Model.ReceivingTrader.UserName && !Model.ReceiverConfirmed)))
{
    <button class="btn btn-custom-submit" onclick="updateTrade('Confirm')">Confirm Trade</button>
}
@if (Model.SenderConfirmed && Model.ReceiverConfirmed && ((User.Identity.Name == Model.SendingTrader.UserName && Model.SenderRating == 0)
                            || (User.Identity.Name == Model.ReceivingTrader.UserName && Model.ReceiverRating == 0)))
{
    @: Rate Trade: 
    <button class="btn btn-custom-submit" onclick="updateTrade('1')">Poor</button>
    <button class="btn btn-custom-submit" onclick="updateTrade('2')">Fair</button>
    <button class="btn btn-custom-submit" onclick="updateTrade('3')">Good</button>
    <button class="btn btn-custom-submit" onclick="updateTrade('4')">Great</button>
    <button class="btn btn-custom-submit" onclick="updateTrade('5')">Perfect</button>
}

<br />
@if (!Model.Submitted)
{
    @Html.ActionLink("Back to List","Index", "Items", null, new { @class="btn btn-sm btn-custom-grey" })
}
else
{
    @Html.ActionLink("Back to List", "List", "Trade", null, new { @class = "btn btn-sm btn-custom-grey" })
}

@using (Html.BeginForm("Create", "Trade", FormMethod.Post, new { id = "submitTrade" }))
{
    <input type="hidden" name="TradeId" value="@Model.TradeId"/>
    <input type="hidden" name="SenderId" value="@Model.SendingTrader.Id" />
    <input type="hidden" name="ReceiverId" value="@Model.ReceivingTrader.Id" />
}

@using (Html.BeginForm("Update", "Trade", FormMethod.Post, new { id = "updateTrade" }))
{
    <input type="hidden" name="TradeId" value="@Model.TradeId" />
}

